{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      yt_url: 'https://www.youtube.com/watch?v=39olCJI2TgQ',\n      // 用来存储 YouTube 链接\n      videoData: {}\n    };\n  },\n  methods: {\n    download() {\n      alert(`Starting download for: ${this.url}`);\n    },\n    async downloadFile(link) {\n      try {\n        // 向后端发送请求下载文件\n        const response = await axios.get(link, {\n          responseType: 'blob' // 设置返回类型为二进制流\n        });\n\n        // 创建一个临时链接，触发浏览器下载\n        const blob = response.data;\n        const downloadUrl = window.URL.createObjectURL(blob);\n        const linkElement = document.createElement('a');\n        linkElement.href = downloadUrl;\n        linkElement.download = 'video.mp4'; // 可根据需要修改文件名\n        linkElement.click();\n\n        // 释放 URL 对象\n        window.URL.revokeObjectURL(downloadUrl);\n      } catch (error) {\n        console.error('下载失败:', error);\n        alert('下载失败，请稍后再试');\n      }\n    },\n    async fetchFormats() {\n      if (!this.yt_url) {\n        alert('请输入有效的 YouTube 视频 URL');\n        return;\n      }\n      console.log(\"fetchFormats yt_url: \" + this.yt_url);\n      try {\n        const response = await axios.get('http://localhost:3001/get-formats', {\n          params: {\n            url: this.yt_url\n          }\n        });\n        this.videoData = response.data; // 保存返回的格式信息\n        console.log(\"fetchFormats this.videoData: \" + this.videoData);\n      } catch (error) {\n        console.error('获取格式失败:', error);\n      }\n    }\n    // async ytDownlaodTest(){\n    //   if (!this.yt_url) {\n    //     alert('请输入有效的 YouTube 视频 URL');\n    //     return;\n    //   }\n    //   const videoStream = ytdl(this.yt_url);\n    //   videoStream.pipe(fs.createWriteStream('video.mp4'));\n    //   videoStream.on('end',()=>{\n    //       console.log(\"downlaod ==========\");\n    //   });\n    // }\n  }\n};","map":{"version":3,"names":["axios","data","yt_url","videoData","methods","download","alert","url","downloadFile","link","response","get","responseType","blob","downloadUrl","window","URL","createObjectURL","linkElement","document","createElement","href","click","revokeObjectURL","error","console","fetchFormats","log","params"],"sources":["/Users/jc/vue_workspace/youtube/yt-downloader/src/components/MainContent.vue"],"sourcesContent":["<template>\n  <main class=\"main-content\">\n    <div class=\"converter-container\">\n      <!-- 图标 -->\n      <div class=\"icon-container\">\n        <img src=\"@/assets/yt_icon.png\" alt=\"YouTube Icon\" class=\"icon\" />\n      </div>\n\n      <!-- 标题 -->\n      <h1 class=\"title\">{{ $t(\"title\") }}</h1>\n\n      <!-- 描述 -->\n      <p class=\"description\">\n        {{ $t(\"description\") }}\n      </p>\n\n      <div class=\"container\">\n        <div class=\"input-wrapper\">\n          <input type=\"text\" v-model=\"yt_url\" placeholder=\"https://www.youtube.com/watch?v=...\" class=\"input-box\" />\n          <button class=\"download-button2\" @click=\"fetchFormats\">{{ $t(\"download\") }}</button>\n        </div>\n      </div>\n\n      <p class=\"converter-container-tip\">{{ $t(\"tip\") }}</p>\n    </div>\n\n    <div class=\"container2\" v-if=\"videoData && videoData?.title\">\n      <div class=\"video-card\">\n        <div class=\"video-header\">\n          <img :src=\"videoData.thumbnail\" class=\"thumbnail\" alt=\"Thumbnail\" />\n          <h2 class=\"title\">{{ videoData.title }}</h2>\n        </div>\n        <h3 class=\"formats-title\">{{ $t(\"formats\") }}</h3>\n        <p class=\"formats-title-tip\">{{ $t(\"formatsTip\") }}</p>\n        <div class=\"formats-list\">\n          <div v-for=\"format in videoData.formats\" :key=\"format.format_id\" class=\"format-item\">\n            <span class=\"download-icon\">⬇️</span>\n            <div class=\"format-details\">\n              <a :href=\"format.url\" class=\"download-link\" target=\"_blank\">\n                {{ videoData.title }}.{{ format.ext }}\n              </a>\n              <span class=\"format-info\">{{ format.resolution || \"Audio Only\" }} • {{ (format.filesize / (1024 * 1024)).toFixed(2) }} MB</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </main>\n</template>\n\n<script>\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      yt_url: 'https://www.youtube.com/watch?v=39olCJI2TgQ', // 用来存储 YouTube 链接\n      videoData: {\n      }\n    };\n  },\n  methods: {\n    download() {\n      alert(`Starting download for: ${this.url}`);\n    },\n    async downloadFile(link) {\n      try {\n        // 向后端发送请求下载文件\n        const response = await axios.get(link, {\n          responseType: 'blob'  // 设置返回类型为二进制流\n        });\n\n        // 创建一个临时链接，触发浏览器下载\n        const blob = response.data;\n        const downloadUrl = window.URL.createObjectURL(blob);\n        const linkElement = document.createElement('a');\n        linkElement.href = downloadUrl;\n        linkElement.download = 'video.mp4';  // 可根据需要修改文件名\n        linkElement.click();\n\n        // 释放 URL 对象\n        window.URL.revokeObjectURL(downloadUrl);\n      } catch (error) {\n        console.error('下载失败:', error);\n        alert('下载失败，请稍后再试');\n      }\n    },\n\n    async fetchFormats() {\n      if (!this.yt_url) {\n        alert('请输入有效的 YouTube 视频 URL');\n        return;\n      }\n\n      console.log(\"fetchFormats yt_url: \" + this.yt_url);\n      try {\n        const response = await axios.get('http://localhost:3001/get-formats', {\n          params: { url: this.yt_url }\n        });\n        this.videoData = response.data; // 保存返回的格式信息\n        console.log(\"fetchFormats this.videoData: \" + this.videoData);\n      } catch (error) {\n        console.error('获取格式失败:', error);\n      }\n    },\n    // async ytDownlaodTest(){\n    //   if (!this.yt_url) {\n    //     alert('请输入有效的 YouTube 视频 URL');\n    //     return;\n    //   }\n    //   const videoStream = ytdl(this.yt_url);\n    //   videoStream.pipe(fs.createWriteStream('video.mp4'));\n    //   videoStream.on('end',()=>{\n    //       console.log(\"downlaod ==========\");\n    //   });\n    // }\n  }\n}\n</script>\n\n\n<style scoped>\n/* 全局样式 */\n.main-content {\n  text-align: center;\n  font-family: Arial, sans-serif;\n  padding: 20px;\n}\n\n.converter-container {\n  padding: 40px 20px;\n}\n\n.converter-container-tip {\n  font-size: 12px;\n  white-space: pre-line;\n  margin-top: 30px;\n}\n\n.icon-container {\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n  margin-bottom: 20px;\n}\n\n.icon {\n  width: 285px;\n  height: auto;\n}\n\n.title {\n  font-size: 32px;\n  font-weight: bold;\n  color: #113b92;\n}\n\n.description {\n  font-size: 16px;\n  color: #555;\n  margin: 10px 0 20px;\n}\n\n/* 最外层容器居中 */\n.container {\n  display: flex;\n  justify-content: center;\n  margin-top: 40px;\n}\n\n/* 输入框和按钮的整体外层 */\n.input-wrapper {\n  display: flex;\n  align-items: center;\n  border-radius: 8px;\n  overflow: hidden;\n  width: 100%;\n  max-width: 500px; /* 最大宽度，防止过宽 */\n  height: 60px; /* 高度统一 */\n}\n\n/* 输入框样式 */\n.input-box {\n  flex: 1; /* 填满剩余空间 */\n  padding: 12px;\n  border: none;\n  outline: none;\n  font-size: 1em;\n  background-color: #f1f1f1;\n  color: #333;\n  height: 100%; /* 保证输入框高度与父容器一致 */\n}\n\n/* 下载按钮样式 */\n.download-button2 {\n  background-color: #027AFF;\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n  border: none;\n  cursor: pointer;\n  height: 100%; /* 保证按钮高度与输入框一致 */\n  padding: 0 20px; /* 左右内边距 */\n  border-radius: 8px;\n}\n\n/* 按钮 hover 样式 */\n.download-button2:hover {\n  background-color: #027AFF;\n}\n\n.converter-container-tip {\n  font-size: 12px;\n  margin-top: 20px;\n}\n\n.container2 {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 30px;\n}\n\n.video-card {\n  background: #f1f1f1;\n  padding: 20px;\n  border-radius: 10px;\n  width: 100%;\n  max-width: 600px;\n}\n\n.video-header {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.thumbnail {\n  width: 120px;\n  height: 80px;\n  border-radius: 5px;\n  margin-right: 10px;\n}\n\n.title {\n  font-size: 16px;\n  font-weight: bold;\n  flex-grow: 1;\n}\n\n.formats-title {\n  font-size: 14px;\n  font-weight: bold;\n}\n\n.formats-title-tip {\n  font-size: 12px;\n  margin-top: -10px;\n}\n\n.formats-list {\n  margin-top: 20px;\n}\n\n.format-item {\n  display: flex;\n  align-items: center;\n  background: #ffffff;\n  padding: 16px;\n  border-radius: 5px;\n  margin-bottom: 16px;\n}\n\n.download-icon {\n  font-size: 36px;\n  margin-right: 10px;\n}\n\n.format-details {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n}\n\n.download-link {\n  text-decoration: none;\n  color: #333;\n  font-weight: bold;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.download-link:hover {\n  text-decoration: underline;\n}\n\n.format-info {\n  font-size: 12px;\n  color: #666;\n  margin-top: 2px;\n}\n\n/* 响应式设计 */\n@media screen and (max-width: 768px) {\n  /* 移动端：输入框和按钮纵向排列 */\n  .input-wrapper {\n    flex-direction: column; /* 输入框和按钮纵向排列 */\n    width: 100%; /* 宽度充满屏幕 */\n    height: auto; /* 使容器的高度适应内容 */\n  }\n\n  .input-box {\n    width: 100%;\n    margin-bottom: 10px; /* 输入框和按钮之间的间距 */\n    padding: auto;\n  }\n\n  .download-button2 {\n    width: 160px; /* 按钮在小屏幕上占满宽度 */\n    margin-top: 10px; /* 按钮与输入框之间的间距 */\n    padding: 16px 0; /* 增加按钮的高度 */\n  }\n\n  .video-card {\n    width: 100%;\n    max-width: none;\n  }\n\n  .formats-list {\n    width: 100%;\n  }\n\n  .format-item {\n    flex-direction: column;\n    align-items: center;\n  }\n\n  .download-link {\n    font-size: 14px;\n  }\n\n  .format-info {\n    font-size: 12px;\n  }\n}\n\n/* Web端样式 */\n@media screen and (min-width: 769px) {\n  .container {\n    justify-content: center;\n  }\n\n  .input-wrapper {\n    width: 44%;\n  }\n}\n</style>\n"],"mappings":";;;AAmDA,OAAOA,KAAI,MAAO,OAAO;AACzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,6CAA6C;MAAE;MACvDC,SAAS,EAAE,CACX;IACF,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,QAAQA,CAAA,EAAG;MACTC,KAAK,CAAC,0BAA0B,IAAI,CAACC,GAAG,EAAE,CAAC;IAC7C,CAAC;IACD,MAAMC,YAAYA,CAACC,IAAI,EAAE;MACvB,IAAI;QACF;QACA,MAAMC,QAAO,GAAI,MAAMV,KAAK,CAACW,GAAG,CAACF,IAAI,EAAE;UACrCG,YAAY,EAAE,MAAK,CAAG;QACxB,CAAC,CAAC;;QAEF;QACA,MAAMC,IAAG,GAAIH,QAAQ,CAACT,IAAI;QAC1B,MAAMa,WAAU,GAAIC,MAAM,CAACC,GAAG,CAACC,eAAe,CAACJ,IAAI,CAAC;QACpD,MAAMK,WAAU,GAAIC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;QAC/CF,WAAW,CAACG,IAAG,GAAIP,WAAW;QAC9BI,WAAW,CAACb,QAAO,GAAI,WAAW,EAAG;QACrCa,WAAW,CAACI,KAAK,CAAC,CAAC;;QAEnB;QACAP,MAAM,CAACC,GAAG,CAACO,eAAe,CAACT,WAAW,CAAC;MACzC,EAAE,OAAOU,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,OAAO,EAAEA,KAAK,CAAC;QAC7BlB,KAAK,CAAC,YAAY,CAAC;MACrB;IACF,CAAC;IAED,MAAMoB,YAAYA,CAAA,EAAG;MACnB,IAAI,CAAC,IAAI,CAACxB,MAAM,EAAE;QAChBI,KAAK,CAAC,uBAAuB,CAAC;QAC9B;MACF;MAEAmB,OAAO,CAACE,GAAG,CAAC,uBAAsB,GAAI,IAAI,CAACzB,MAAM,CAAC;MAClD,IAAI;QACF,MAAMQ,QAAO,GAAI,MAAMV,KAAK,CAACW,GAAG,CAAC,mCAAmC,EAAE;UACpEiB,MAAM,EAAE;YAAErB,GAAG,EAAE,IAAI,CAACL;UAAO;QAC7B,CAAC,CAAC;QACF,IAAI,CAACC,SAAQ,GAAIO,QAAQ,CAACT,IAAI,EAAE;QAChCwB,OAAO,CAACE,GAAG,CAAC,+BAA8B,GAAI,IAAI,CAACxB,SAAS,CAAC;MAC/D,EAAE,OAAOqB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;MACjC;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}